// {"name": "p00000", "language": "rb", "prompt": "1.upto(9) { |a| 1.upto(9) { |b| p \"#{a}x#{b}=#{a * b}\" } }\n", "test": "def check(candidate):\n assert candidate() == \"1x1=1\\n1x2=2\\n1x3=3\\n1x4=4\\n1x5=5\\n1x6=6\\n1x7=7\\n1x8=8\\n1x9=9\\n2x1=2\\n2x2=4\\n2x3=6\\n2x4=8\\n2x5=10\\n2x6=12\\n2x7=14\\n2x8=16\\n2x9=18\\n3x1=3\\n3x2=6\\n3x3=9\\n3x4=12\\n3x5=15\\n3x6=18\\n3x7=21\\n3x8=24\\n3x9=27\\n4x1=4\\n4x2=8\\n4x3=12\\n4x4=16\\n4x5=20\\n4x6=24\\n4x7=28\\n4x8=32\\n4x9=36\\n5x1=5\\n5x2=10\\n5x3=15\\n5x4=20\\n5x5=25\\n5x6=30\\n5x7=35\\n5x8=40\\n5x9=45\\n6x1=6\\n6x2=12\\n6x3=18\\n6x4=24\\n6x5=30\\n6x6=36\\n6x7=42\\n6x8=48\\n6x9=54\\n7x1=7\\n7x2=14\\n7x3=21\\n7x4=28\\n7x5=35\\n7x6=42\\n7x7=49\\n7x8=56\\n7x9=63\\n8x1=8\\n8x2=16\\n8x3=24\\n8x4=32\\n8x5=40\\n8x6=48\\n8x7=56\\n8x8=64\\n8x9=72\\n9x1=9\\n9x2=18\\n9x3=27\\n9x4=36\\n9x5=45\\n9x6=54\\n9x7=63\\n9x8=72\\n9x9=81\\n\"\n\ndef test_check():\n check(multiplication_table)\n\ntest_check()\n"}
{"name": "p00000", "language": "rb", "prompt": "def multiplication_table\n    1.upto(9) { |a| 1.upto(9) { |b| p \"#{a}x#{b}=#{a * b}\" } }\nend\n", "doctests": "transform", "original": "/path/to/original/multiplication_table.rb", "prompt_terminology": "reworded", "entry_point": "multiplication_table", "test": "def check(candidate):\n assert candidate() == \"1x1=1\\n1x2=2\\n1x3=3\\n1x4=4\\n1x5=5\\n1x6=6\\n1x7=7\\n1x8=8\\n1x9=9\\n2x1=2\\n2x2=4\\n2x3=6\\n2x4=8\\n2x5=10\\n2x6=12\\n2x7=14\\n2x8=16\\n2x9=18\\n3x1=3\\n3x2=6\\n3x3=9\\n3x4=12\\n3x5=15\\n3x6=18\\n3x7=21\\n3x8=24\\n3x9=27\\n4x1=4\\n4x2=8\\n4x3=12\\n4x4=16\\n4x5=20\\n4x6=24\\n4x7=28\\n4x8=32\\n4x9=36\\n5x1=5\\n5x2=10\\n5x3=15\\n5x4=20\\n5x5=25\\n5x6=30\\n5x7=35\\n5x8=40\\n5x9=45\\n6x1=6\\n6x2=12\\n6x3=18\\n6x4=24\\n6x5=30\\n6x6=36\\n6x7=42\\n6x8=48\\n6x9=54\\n7x1=7\\n7x2=14\\n7x3=21\\n7x4=28\\n7x5=35\\n7x6=42\\n7x7=49\\n7x8=56\\n7x9=63\\n8x1=8\\n8x2=16\\n8x3=24\\n8x4=32\\n8x5=40\\n8x6=48\\n8x7=56\\n8x8=64\\n8x9=72\\n9x1=9\\n9x2=18\\n9x3=27\\n9x4=36\\n9x5=45\\n9x6=54\\n9x7=63\\n9x8=72\\n9x9=81\\n\"\n\ndef test_check():\n check(multiplication_table)\n\ntest_check()\n"}
// {"name": "HumanEval_89_encrypt", "language": "py", "prompt": "de \"\"\n", "doctests": "transform", "original": "/hopy", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "encrypt", "test": "def check(candidate):\n    assert candidate('hi') == 'lm'\n    assert candidate('asdfghjkl') == 'ewhjklnop'\n    assert candidate('gf') == 'kj'\n    assert candidate('et') == 'ix'\n    assert candidate('faewfawefaewg') == 'jeiajeaijeiak'\n    assert candidate('hellomyfriend') == 'lippsqcjvmirh'\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') == 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n    assert candidate('a') == 'e'\n\ndef test_check():\n    check(encrypt)\n\ntest_check()\n"}

// {
//     "problems": {
//       "p00000": {
//         "implementations": [
//           {
//             "id": 4299,
//             "buggy_submission_id": 2753,
//             "fixed_submission_id": 2754,
//             "user_id": "u472197678",
//             "buggy_code": "1.upto(9) { |a| 1.upto(9) { |b| p \"#{a}x#{b}=#{a * b}\" } }\n",
//             "fixed_code": "1.upto(9) { |a| 1.upto(9) { |b| puts \"#{a}x#{b}=#{a * b}\" } }\n",
//             "labels": [
//               "call.function.change",
//               "io.output.change"
//             ],
//             "change_count": 1,
//             "line_hunks": 1
//           },
//           {
//             "id": 4300,
//             "buggy_submission_id": 2755,
//             "fixed_submission_id": 2756,
//             "user_id": "u866617684",
//             "buggy_code": "n1 = 1\nn2 = 1\n\n(1..9).each do |n1|\n  (1..9).each do |n2|\n    temp = n1 * n2\n    print n1, '+', n2, '=', temp, \"\\n\"\n  end\nend\n",
//             "fixed_code": "n1 = 1\nn2 = 1\n\n(1..9).each do |n1|\n  (1..9).each do |n2|\n    temp = n1 * n2\n    print n1, 'x', n2, '=', temp, \"\\n\"\n  end\nend\n",
//             "labels": [
//               "literal.string.change",
//               "call.arguments.change",
//               "io.output.change"
//             ],
//             "change_count": 1,
//             "line_hunks": 1
//           },
//         ],
//         "test_cases": [
//           {
//             "id": 801421,
//             "input": "",
//             "output": "1x1=1\n1x2=2\n1x3=3\n1x4=4\n1x5=5\n1x6=6\n1x7=7\n1x8=8\n1x9=9\n2x1=2\n2x2=4\n2x3=6\n2x4=8\n2x5=10\n2x6=12\n2x7=14\n2x8=16\n2x9=18\n3x1=3\n3x2=6\n3x3=9\n3x4=12\n3x5=15\n3x6=18\n3x7=21\n3x8=24\n3x9=27\n4x1=4\n4x2=8\n4x3=12\n4x4=16\n4x5=20\n4x6=24\n4x7=28\n4x8=32\n4x9=36\n5x1=5\n5x2=10\n5x3=15\n5x4=20\n5x5=25\n5x6=30\n5x7=35\n5x8=40\n5x9=45\n6x1=6\n6x2=12\n6x3=18\n6x4=24\n6x5=30\n6x6=36\n6x7=42\n6x8=48\n6x9=54\n7x1=7\n7x2=14\n7x3=21\n7x4=28\n7x5=35\n7x6=42\n7x7=49\n7x8=56\n7x9=63\n8x1=8\n8x2=16\n8x3=24\n8x4=32\n8x5=40\n8x6=48\n8x7=56\n8x8=64\n8x9=72\n9x1=9\n9x2=18\n9x3=27\n9x4=36\n9x5=45\n9x6=54\n9x7=63\n9x8=72\n9x9=81\n"
//           }
//         ]
//       },
//       "p00001": {
//         "implementations": [
//           {
//             "id": 7445,
//             "buggy_submission_id": 4976,
//             "fixed_submission_id": 4977,
//             "user_id": "u421423781",
//             "buggy_code": "h = []\n(0..9).each do |i|\n  h[i] = gets.to_i\nend\nputs (h.sort.reverse)[0..2].join(',')\n",
//             "fixed_code": "h = []\n(0..9).each do |i|\n  h[i] = gets.to_i\nend\nputs (h.sort.reverse)[0..2].join(\"\\n\")\n",
//             "labels": [],
//             "change_count": 3,
//             "line_hunks": 1
//           },
//         ],
//         "test_cases": [
//           {
//             "id": 578888,
//             "input": "100\n-8\n0\n552\n011\n104\n1\n1\n3\n112",
//             "output": "552\n112\n104\n"
//           },
//           {
//             "id": 578807,
//             "input": "100\n94\n342\n667\n348\n600\n1422\n1182\n476\n205",
//             "output": "1422\n1182\n667\n"
//           },
//           {
//             "id": 578878,
//             "input": "1819\n856\n1010\n286\n100\n126\n672\n2715\n0\n30",
//             "output": "2715\n1819\n1010\n"
//           },
//         ]
//       },
//     }
// }